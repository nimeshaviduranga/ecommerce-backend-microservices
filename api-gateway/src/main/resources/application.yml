server:
  port: 8080

spring:
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration
      - org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration
  application:
    name: api-gateway
  config:
    import: "optional:configserver:http://localhost:8888"
  cloud:
    config:
      username: config
      password: config
      fail-fast: false
      retry:
        initial-interval: 1500
        multiplier: 1.5
        max-attempts: 6
        max-interval: 10000
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      routes:
        - id: auth-service
          uri: lb://AUTH-SERVICE
          predicates:
            - Path=/api/auth/**
          filters:
            - RewritePath=/api/auth/(?<segment>.*), /$\{segment}
            - name: CircuitBreaker
              args:
                name: authCircuitBreaker
                fallbackUri: forward:/fallback/auth

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/api/users/**
          filters:
            - RewritePath=/api/users/(?<segment>.*), /$\{segment}
            - name: CircuitBreaker
              args:
                name: userCircuitBreaker
                fallbackUri: forward:/fallback/user

        - id: product-service
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/api/products/**
          filters:
            - RewritePath=/api/products/(?<segment>.*), /$\{segment}
            - name: CircuitBreaker
              args:
                name: productCircuitBreaker
                fallbackUri: forward:/fallback/product

        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/api/orders/**
          filters:
            - RewritePath=/api/orders/(?<segment>.*), /$\{segment}
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
                fallbackUri: forward:/fallback/order

        - id: cart-service
          uri: lb://CART-SERVICE
          predicates:
            - Path=/api/carts/**
          filters:
            - RewritePath=/api/carts/(?<segment>.*), /$\{segment}
            - name: CircuitBreaker
              args:
                name: cartCircuitBreaker
                fallbackUri: forward:/fallback/cart

        - id: payment-service
          uri: lb://PAYMENT-SERVICE
          predicates:
            - Path=/api/payments/**
          filters:
            - RewritePath=/api/payments/(?<segment>.*), /$\{segment}
            - name: CircuitBreaker
              args:
                name: paymentCircuitBreaker
                fallbackUri: forward:/fallback/payment

  # Security configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9000 # Auth service issuer URI

# Resilience4j Circuit Breaker configuration
resilience4j:
  circuitbreaker:
    instances:
      authCircuitBreaker:
        registerHealthIndicator: true
        slidingWindowSize: 10
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowType: COUNT_BASED
        minimumNumberOfCalls: 5
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        automaticTransitionFromOpenToHalfOpenEnabled: true
  timelimiter:
    instances:
      authCircuitBreaker:
        timeoutDuration: 3s

# Actuator endpoints for monitoring
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: ALWAYS

eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka:password@localhost:8761/eureka/
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true

# Logging configuration
logging:
  level:
    org.springframework.cloud.gateway: INFO
    org.springframework.security: INFO
    reactor.netty: INFO

# Application information
info:
  app:
    name: ${spring.application.name}
    description: API Gateway for E-Commerce Microservices
    version: 1.0.0